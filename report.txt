When running my implementation of the 3 algorithms (Hash join with quadratic probing and over allocation factor of 2) the following output could be observed:

testing correctness
===================
Testing Equality Join: NestedLoopsJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join: HashJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join: SortMergeJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------


scaling experiments
===================
Testing Equality Join At Scale        10 : NestedLoopsJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale        10 : HashJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale        10 : SortMergeJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale       100 : NestedLoopsJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale       100 : HashJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale       100 : SortMergeJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale      1000 : NestedLoopsJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale      1000 : HashJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------
Testing Equality Join At Scale      1000 : SortMergeJoin...
Customer x Orders correct: true
Orders x Customer correct: true
--------------------

Testing Equality Join At Scale        10 : NestedLoopsJoin...Customer Left:        57us, Orders Left:        59us
Testing Equality Join At Scale       100 : NestedLoopsJoin...Customer Left:      2707us, Orders Left:      3209us
Testing Equality Join At Scale      1000 : NestedLoopsJoin...Customer Left:    242585us, Orders Left:    301659us
Testing Equality Join At Scale     10000 : NestedLoopsJoin...Customer Left:  25359488us, Orders Left:  32705893us
Testing Equality Join At Scale        10 : HashJoin...Customer Left:        31us, Orders Left:        24us
Testing Equality Join At Scale       100 : HashJoin...Customer Left:       254us, Orders Left:       215us
Testing Equality Join At Scale      1000 : HashJoin...Customer Left:      2763us, Orders Left:      2750us
Testing Equality Join At Scale     10000 : HashJoin...Customer Left:     37820us, Orders Left:     27877us
Testing Equality Join At Scale    100000 : HashJoin...Customer Left:    460704us, Orders Left:    327219us
Testing Equality Join At Scale        10 : SortMergeJoin...Customer Left:        48us, Orders Left:        33us
Testing Equality Join At Scale       100 : SortMergeJoin...Customer Left:       311us, Orders Left:       291us
Testing Equality Join At Scale      1000 : SortMergeJoin...Customer Left:      3258us, Orders Left:      3906us
Testing Equality Join At Scale     10000 : SortMergeJoin...Customer Left:     36900us, Orders Left:     34680us
Testing Equality Join At Scale    100000 : SortMergeJoin...Customer Left:    435729us, Orders Left:    380342us

As can be seen Nested Loop Join is the slowest of the algorithms. The complexity is O(n^2) as the algorithm has to iterate through every tuple in one of the relations for each tuple on the other. I have decided to buffer the left side. As can be seen when orders is on the left the performance of the algorithm is worse. This is due to the fact that the orders relation is 3 times the size of the customer relation and therefore creating the buffer is more costly. Also, the space required by the algorithm can be reduced by choosing the buffered side (left) to be the smaller table.

Sort Merge Join is much faster than the Nested Loop Join. It also isn't a pipeline breaker as it doesn't store any of the relations in the buffer. Here the algorithm is more efficient when the larger relation (orders) is on the left, because the first if statement in my implementation advances the left pointer. A larger relation will usually have less matches then the smaller one and when there are more tuples to be skipped on the left the algorithm only needs to perform a single check to advance that left pointer.

Hash Join is the fastest of the implementations because you create a hash table for one of the relations and the other can check for existence with an O(1) complexity. The probe shorter the probe chains the better the effect. For Hash Join it is better to hash the smaller table, because then there are fewer conflicts in the hash table and therefore shorter probing chains. This results in shorter retrieval times for each element in the larger table. I have also tested varying over allocation factors for allocating space to the hash table and have found that for linear probing, the bigger the over allocation factor the quicker the join. This is because the more slots are empty the shorter the probe chains have to be. For quadratic probing the increase in performance isn't as drastic. I have found however that for very small tables quadratic probing with a low over allocation factor is even worse than linear probing. This is because when there are only 1-2 extra spaces in a very small hash table, the quadratic function has a harder time nailing down a particular index. Graphs I've created to visualize this can be seen here https://drive.google.com/open?id=1ICCqR-doWs0eVQ95QK3CI6v_uq-py9fN

Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz

8GB of memory

machdep.cpu.max_basic: 13
machdep.cpu.max_ext: 2147483656
machdep.cpu.vendor: GenuineIntel
machdep.cpu.brand_string: Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz
machdep.cpu.family: 6
machdep.cpu.model: 69
machdep.cpu.extmodel: 4
machdep.cpu.extfamily: 0
machdep.cpu.stepping: 1
machdep.cpu.feature_bits: 9221959987971750911
machdep.cpu.leaf7_feature_bits: 10155
machdep.cpu.extfeature_bits: 142473169152
machdep.cpu.signature: 263761
machdep.cpu.brand: 0
machdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C
machdep.cpu.leaf7_features: SMEP ERMS RDWRFSGS TSC_THREAD_OFFSET BMI1 AVX2 BMI2 INVPCID FPU_CSDS
machdep.cpu.extfeatures: SYSCALL XD 1GBPAGE EM64T LAHF LZCNT RDTSCP TSCI
machdep.cpu.logical_per_package: 16
machdep.cpu.cores_per_package: 8
machdep.cpu.microcode_version: 36
machdep.cpu.processor_flag: 6
machdep.cpu.mwait.linesize_min: 64
machdep.cpu.mwait.linesize_max: 64
machdep.cpu.mwait.extensions: 3
machdep.cpu.mwait.sub_Cstates: 286531872
machdep.cpu.thermal.sensor: 1
machdep.cpu.thermal.dynamic_acceleration: 1
machdep.cpu.thermal.invariant_APIC_timer: 1
machdep.cpu.thermal.thresholds: 2
machdep.cpu.thermal.ACNT_MCNT: 1
machdep.cpu.thermal.core_power_limits: 1
machdep.cpu.thermal.fine_grain_clock_mod: 1
machdep.cpu.thermal.package_thermal_intr: 1
machdep.cpu.thermal.hardware_feedback: 0
machdep.cpu.thermal.energy_policy: 1
machdep.cpu.xsave.extended_state: 7 832 832 0
machdep.cpu.xsave.extended_state1: 1 0 0 0
machdep.cpu.arch_perf.version: 3
machdep.cpu.arch_perf.number: 4
machdep.cpu.arch_perf.width: 48
machdep.cpu.arch_perf.events_number: 7
machdep.cpu.arch_perf.events: 0
machdep.cpu.arch_perf.fixed_number: 3
machdep.cpu.arch_perf.fixed_width: 48
machdep.cpu.cache.linesize: 64
machdep.cpu.cache.L2_associativity: 8
machdep.cpu.cache.size: 256
machdep.cpu.tlb.inst.large: 8
machdep.cpu.tlb.data.small: 64
machdep.cpu.tlb.data.small_level1: 64
machdep.cpu.tlb.shared: 1024
machdep.cpu.address_bits.physical: 39
machdep.cpu.address_bits.virtual: 48
machdep.cpu.core_count: 2
machdep.cpu.thread_count: 4
machdep.cpu.tsc_ccc.numerator: 0
machdep.cpu.tsc_ccc.denominator: 0